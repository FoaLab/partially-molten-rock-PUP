Traceback (most recent call last):
  File "/Users/fredericoteixeira/Projects/partially-molten-rock-PUP/rock-env/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/fredericoteixeira/Projects/partially-molten-rock-PUP/rock-env/lib/python3.9/site-packages/nbclient/client.py", line 1117, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/fredericoteixeira/Projects/partially-molten-rock-PUP/rock-env/lib/python3.9/site-packages/nbclient/util.py", line 78, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/fredericoteixeira/Projects/partially-molten-rock-PUP/rock-env/lib/python3.9/site-packages/nbclient/util.py", line 57, in just_run
    return loop.run_until_complete(coro)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/Users/fredericoteixeira/Projects/partially-molten-rock-PUP/rock-env/lib/python3.9/site-packages/nbclient/client.py", line 558, in async_execute
    await self.async_execute_cell(
  File "/Users/fredericoteixeira/Projects/partially-molten-rock-PUP/rock-env/lib/python3.9/site-packages/nbclient/client.py", line 862, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/Users/fredericoteixeira/Projects/partially-molten-rock-PUP/rock-env/lib/python3.9/site-packages/nbclient/client.py", line 765, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
par = [
    IdealSolutionParameters(600e3, 70., 1./50., 1780. + 273.), 
    IdealSolutionParameters(450e3, 30., 1./100., 950. + 273.)
]

# thermodynamic state
Pref = 1.
Pvar = np.linspace(0., 7., 20)
Tref = 1350. + 273.
Tvar = np.linspace(1050., 1950., 200) + 273
cref = np.array([0.75, 0.25])
cvar = np.zeros((200, 2), dtype=float)
cvar[:, 0] = np.linspace(0., 1., 200)
cvar[:, 1] = 1.0 - np.linspace(0., 1., 200)

fig, ((axA, axB), (axC, axD)) = plt.subplots(nrows=2, ncols=2, figsize=(18.0, 18.0))

P  =  Pvar
T  =  Tref
c  =  cref
Tm = np.array([par_i.Tm0 + P/par_i.clap for par_i in par]).transpose()

axA.plot(P, Tm[:, 0]-273., '-k', linewidth=2, label=r'$T^\mathcal{S}_1$')
axA.plot(P, Tm[:, 1]-273., '--k', linewidth=2, label=r'$T^\mathcal{S}_2$')
axA.set_xlim(0.0, 7.0)
axA.set_xlabel('$P$, GPa', fontsize=20)
axA.set_ylim(900, 2000)
axA.set_ylabel(r'$T$, $^\circ$C', fontsize=20)
axA.text(
    0.01, 1990, r'(a)', fontsize=20, 
    verticalalignment='top', horizontalalignment='left'
)
axA.tick_params(axis='both', which='major', labelsize=13)
axA.legend(loc='lower right', fontsize=15)

P  =  Pref
T  =  Tvar
c  =  cref
K = np.array([[ParCoef_IdealSolution(T_i, P, par_j) for par_j in par] for T_i in T])

axB.plot(T-273., K[:, 0], '-k', linewidth=2, label=r'$\check{K}_1$')
axB.plot(T-273., K[:, 1], '--k', linewidth=2, label=r'$\check{K}_2$')
axB.set_yscale('log')
axB.set_xlim(1050, 1950)
axB.set_xticks((1200., 1400., 1600., 1800.))
axB.set_xticklabels((1200, 1400, 1600, 1800))
axB.set_xlabel(r'$T$, $^\circ$C', fontsize=20)
axB.set_ylim(0.01, 100)
axB.set_ylabel(r'${c}^s_j/{c}^\ell_j$', fontsize=20)
axB.text(
    1050, 95.0, r'(b)', fontsize=20, 
    verticalalignment='top', horizontalalignment='left'
)
axB.tick_params(axis='both', which='major', labelsize=13)
axB.legend(fontsize=15)

T = Tvar
P = Pref
c = cref
Theta = EquilibriumState(len(par), c, T, P, par, ParCoef_IdealSolution)

axD.plot(Tvar-273., [t.f for t in Theta],'-k','linewidth',2)
axD.set_xlim(1200., 1750.)
axD.set_xticks((1200., 1300., 1400., 1500., 1600., 1700.))
axD.set_xticklabels((1200, 1300, 1400, 1500, 1600, 1700))
axD.set_ylim(-0.02, 1.02)
axD.set_xlabel(r'$T$, $^\circ$C', fontsize=20)
axD.set_ylabel(r'$\check{f}$, wt. frac.', fontsize=20)
axD.tick_params(axis='both', which='major', labelsize=13)
axD.text(
    1200.0, 1.01, r'(d)', fontsize=20, 
    verticalalignment='top', horizontalalignment='left'
)

cl_hold = np.array([t.cl[1] for t in Theta])
cs_hold = np.array([t.cs[1] for t in Theta])
f_hold = np.array([t.f for t in Theta])
cl_hold[f_hold < 1e-6] = np.nan
cs_hold[1.-f_hold < 1e-6] = np.nan

c  = cvar
P  = Pref
T  = Tref
Theta2 = EquilibriumState(len(par), c, T, P, par, ParCoef_IdealSolution)

axC.plot(
    c[:, 1], [t.Ts - 273. for t in Theta2], '-', 
    linewidth=4, color=[0.7, 0.7, 0.7]
)
axC.plot(
    c[:, 1], [t.Tl - 273. for t in Theta2], '-', 
    label='phase boundary', linewidth=4, color=[0.7, 0.7, 0.7]
)

axC.plot(cl_hold, Tvar-273., '--k', label='$\check{c}^\ell_2$', linewidth=2)
axC.plot(cs_hold, Tvar-273., '-k', linewidth=2, label='$\check{c}^\ell_2$')
axC.set_xlim(0.0, 1.0)
axC.set_xlabel('${c}^i_2$, wt. frac.', fontsize=20)
axC.set_ylabel('$T$, $^\circ$C', fontsize=20)
axC.text(
    0.005, 1990, '$(c)$', fontsize=20, 
    verticalalignment='top', horizontalalignment='left'
)
axC.text(0.22, 1400, 'solid$+$liquid', fontsize=20)
axC.text(0.72, 1500,'liquid', fontsize=20)
axC.text(0.05, 1150,'solid', fontsize=20)
axC.tick_params(axis='both', which='major', labelsize=13)
axC.legend(fontsize=15)

fig.supxlabel("Figure 10.1", fontsize=20)

plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
[0;32m/var/folders/4z/_rhsq3x965gc56klbm0nmv040000gn/T/ipykernel_74492/1072618618.py[0m in [0;36m<module>[0;34m[0m
[1;32m     58[0m [0mP[0m [0;34m=[0m [0mPref[0m[0;34m[0m[0;34m[0m[0m
[1;32m     59[0m [0mc[0m [0;34m=[0m [0mcref[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 60[0;31m [0mTheta[0m [0;34m=[0m [0mEquilibriumState[0m[0;34m([0m[0mlen[0m[0;34m([0m[0mpar[0m[0;34m)[0m[0;34m,[0m [0mc[0m[0;34m,[0m [0mT[0m[0;34m,[0m [0mP[0m[0;34m,[0m [0mpar[0m[0;34m,[0m [0mParCoef_IdealSolution[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     61[0m [0;34m[0m[0m
[1;32m     62[0m [0maxD[0m[0;34m.[0m[0mplot[0m[0;34m([0m[0mTvar[0m[0;34m-[0m[0;36m273.[0m[0;34m,[0m [0;34m[[0m[0mt[0m[0;34m.[0m[0mf[0m [0;32mfor[0m [0mt[0m [0;32min[0m [0mTheta[0m[0;34m][0m[0;34m,[0m[0;34m'-k'[0m[0;34m,[0m[0;34m'linewidth'[0m[0;34m,[0m[0;36m2[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/var/folders/4z/_rhsq3x965gc56klbm0nmv040000gn/T/ipykernel_74492/1856171876.py[0m in [0;36mEquilibriumState[0;34m(n, cbar, T, P, par, parco_func)[0m
[1;32m     30[0m         [0mcbar[0m [0;34m=[0m [0mcbar[0m[0;34m.[0m[0mtranspose[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     31[0m     [0;32mif[0m [0mcbar[0m[0;34m.[0m[0mshape[0m [0;34m==[0m [0;34m([0m[0;36m1[0m[0;34m,[0m [0mr[0m[0;34m)[0m [0;32mor[0m [0mcbar[0m[0;34m.[0m[0mshape[0m [0;34m==[0m [0;34m([0m[0mn[0m[0;34m,[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 32[0;31m         [0mcbar[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mmatlib[0m[0;34m.[0m[0mrepmat[0m[0;34m([0m[0mcbar[0m[0;34m,[0m [0mr[0m[0;34m,[0m [0;36m1[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     33[0m     [0;32mif[0m [0mcbar[0m[0;34m.[0m[0mshape[0m [0;34m!=[0m [0;34m([0m[0mr[0m[0;34m,[0m [0mn[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     34[0m         [0;32mraise[0m [0mException[0m[0;34m([0m[0;34m'cbar must have shape ({}, {})'[0m[0;34m.[0m[0mformat[0m[0;34m([0m[0mr[0m[0;34m,[0m [0mn[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/Projects/partially-molten-rock-PUP/rock-env/lib/python3.9/site-packages/numpy/__init__.py[0m in [0;36m__getattr__[0;34m(attr)[0m
[1;32m    311[0m                 [0;32mreturn[0m [0mTester[0m[0;34m[0m[0;34m[0m[0m
[1;32m    312[0m [0;34m[0m[0m
[0;32m--> 313[0;31m             raise AttributeError("module {!r} has no attribute "
[0m[1;32m    314[0m                                  "{!r}".format(__name__, attr))
[1;32m    315[0m [0;34m[0m[0m

[0;31mAttributeError[0m: module 'numpy' has no attribute 'matlib'
AttributeError: module 'numpy' has no attribute 'matlib'

